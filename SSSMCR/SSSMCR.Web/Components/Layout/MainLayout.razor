@inherits LayoutComponentBase
@using Blazored.LocalStorage
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage
@inject IAuthService AuthService
@using MudBlazor
@using SSSMCR.Web.Components.Components
@inject NavigationManager Nav

<MudThemeProvider Theme="_theme" @bind-IsDarkMode="_dark" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       OnClick="@ToggleDrawer"
                       Edge="Edge.Start" />
        
        <MudButton OnClick="@(() => Nav.NavigateTo("/"))"
                   Variant="Variant.Text"
                   Class="inline-flex items-center px-3 py-1 rounded-full cursor-pointer"
                   Style="background-color:transparent; box-shadow:none; transition:background-color 0.2s;"
                   onmouseover="this.style.backgroundColor='rgba(255,255,255,0.05)'"
                   onmouseout="this.style.backgroundColor='transparent'">
            <MudText Class="ml-1" Typo="Typo.h6" Color="Color.Info">
                SSSMCR
            </MudText>
        </MudButton>
        <MudSpacer />
        <MudIconButton Icon="@(_dark ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       OnClick="@ToggleDark" />
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen"
               Variant="DrawerVariant.Responsive"
               Elevation="1"
               ClipMode="DrawerClipMode.Never">
        <NavMenu />
    </MudDrawer>

    <MudMainContent>
        <MudContainer Class="pa-4">@Body</MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    bool _dark = false;

    readonly MudTheme _theme = new()
    {
        PaletteDark = new PaletteDark
        {
            Black = "#1e1e2e",
            Background = "#2C2F33",
            Surface = "#23272A",
            Primary = Colors.Indigo.Default,
            Secondary = Colors.Pink.Default,
            AppbarBackground = "#1e1e2e",
            TextPrimary = "#E0E0E0"
        },
        PaletteLight = new PaletteLight
        {
            Primary = Colors.Indigo.Default,
            Secondary = Colors.Pink.Lighten2,
            Background = "#FAFAFA",
            Surface = "#FFFFFF",
            AppbarBackground = Colors.Indigo.Darken1,
            TextPrimary = "#212121"
        }
    };




    const string DrawerKey = "drawer_open";
    const string DarkKey = "pref_dark";

    async Task ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
        try
        {
            await LocalStorage.SetItemAsync(DrawerKey, _drawerOpen);
        }
        catch
        {
            // ignored
        }
    }

    async Task ToggleDark()
    {
        _dark = !_dark;
        try
        {
            await LocalStorage.SetItemAsync(DarkKey, _dark);
        }
        catch
        {
            // ignored
        }

        StateHasChanged();
    }

    private bool _checked = false;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        try
        {
            var savedDrawer = await LocalStorage.GetItemAsync<bool?>(DrawerKey);
            if (savedDrawer.HasValue) _drawerOpen = savedDrawer.Value;
            else await LocalStorage.SetItemAsync(DrawerKey, _drawerOpen);
            
            var savedDark = await LocalStorage.GetItemAsync<bool?>(DarkKey);
            if (savedDark.HasValue) _dark = savedDark.Value;
            else await LocalStorage.SetItemAsync(DarkKey, _dark);
        }
        catch
        {
            // ignored
        }

        if (firstRender && !_checked)
        {
            _checked = true;

            var token = await LocalStorage.GetItemAsync<string>("jwt");
            var expires = await LocalStorage.GetItemAsync<DateTime?>("jwt_expires");

            if (string.IsNullOrWhiteSpace(token) || expires is null || expires <= DateTime.UtcNow)
            {
                await AuthService.LogoutAsync();
            }
        }

        StateHasChanged();
    }
}