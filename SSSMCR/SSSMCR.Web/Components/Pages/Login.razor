@page "/login"
@rendermode InteractiveServer
@using SSSMCR.Shared.Model
@using Components.Auth
@inject IAuthService Auth
@inject ISnackbar Snackbar
@inject NavigationManager Nav
@inject IUserService UserService
@using Blazored.LocalStorage
@using SSSMCR.Web.Components.Components.Auth
@inject ILocalStorageService LocalStorage

<LoginForm IsBusy="@_busy"
           ErrorMessage="@_error"
           OnSubmit="HandleLogin" />

@code {
    private bool _busy;
    private string? _error;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        try
        {
            var email = await LocalStorage.GetItemAsStringAsync("user_email");
            if (!string.IsNullOrEmpty(email))
            {
                Nav.NavigateTo("/", replace: true);
            }
        }
        catch
        {
            // ignored
        }
    }

    private async Task HandleLogin(LoginRequest model)
    {
        _busy = true;
        _error = null;
        try
        {
            Snackbar.Add("Logging in...", Severity.Info);

            var ok = await Auth.LoginAsync(model);
            if (!ok)
            {
                _error = "Wrong email or password";
                Snackbar.Add(_error, Severity.Error);
                return;
            }

            if (!string.IsNullOrWhiteSpace(model.Email))
                await LocalStorage.SetItemAsStringAsync("user_email", model.Email.Trim());
            
            try
            {
                var user = await UserService.GetMeAsync();
                await LocalStorage.SetItemAsync<string>("user_role", user.RoleName);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to load profile: {ex.Message}", Severity.Error);
            }

            Snackbar.Add("Logged in successfully", Severity.Success);
            await Task.Delay(100);

            Nav.NavigateTo("/userpanel", replace: true);
        }
        catch (Exception ex)
        {
            _error = "Logging error: " + ex.Message;
            Snackbar.Add(_error, Severity.Error);
        }
        finally
        {
            _busy = false;
            await InvokeAsync(StateHasChanged);
        }
        
        
    }
}