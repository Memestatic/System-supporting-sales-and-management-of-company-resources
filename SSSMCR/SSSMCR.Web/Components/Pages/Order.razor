@page "/orders/{OrderId:int}"
@using SSSMCR.Shared.Model
@using SSSMCR.Web.Services
@inject OrdersApiService OrdersService
@inject BranchesApiService BranchesService
@inject ISnackbar Snackbar

<PageTitle>Order details</PageTitle>

<MudPaper Class="pa-4">
    @if (_loading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else if (_order is null)
    {
        <MudText Typo="Typo.h6" Color="Color.Error">Order not found.</MudText>
    }
    else
    {
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
            <MudText Typo="Typo.h5">Order #@_order.Id</MudText>
            <MudLink Href="/orders">← Back to orders</MudLink>
        </MudStack>
        
        <MudGrid Class="mb-4">
            <MudItem xs="12" md="8">
                <MudStack>
                    <MudText><b>Customer:</b> @_order.CustomerName (@_order.CustomerEmail)</MudText>
                    <MudText><b>Created at:</b> @_order.CreatedAt.ToString("yyyy-MM-dd HH:mm")</MudText>
                    <MudText><b>Priority:</b> @_order.Priority</MudText>
                    <MudText><b>Total price:</b> @_order.TotalPrice.ToString("C")</MudText>
                </MudStack>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudStack AlignItems="AlignItems.End" Spacing="2">
                    <MudText><b>Status:</b></MudText>
                    <MudChip T="string" Variant="Variant.Filled" Color="@GetStatusColor(_order.Status)">
                        @_order.Status
                    </MudChip>
                    
                    @* <MudSelect T="OrderStatus" Label="Change status" @bind-Value="_newStatus"> *@
                    @*     @foreach (var status in Enum.GetValues<OrderStatus>()) *@
                    @*     { *@
                    @*         <MudSelectItem Value="@status">@status</MudSelectItem> *@
                    @*     } *@
                    @* </MudSelect> *@
                    @* <MudButton OnClick="UpdateStatus" *@
                    @*            Disabled="_order is null" *@
                    @*            Variant="Variant.Filled" *@
                    @*            Color="Color.Primary" *@
                    @*            Class="mt-2"> *@
                    @*     Update status *@
                    @* </MudButton> *@
                </MudStack>
            </MudItem>
        </MudGrid>
        
        <MudText Typo="Typo.h6" Class="mb-2">Ordered products</MudText>

        <MudTable T="OrderItemDto" Items="@_order.Items" Dense="true" Bordered="true" Hover="true" Striped="true">
            <HeaderContent>
                <MudTh style="width: 90px">Product Id</MudTh>
                <MudTh>Product name</MudTh>
                <MudTh style="width: 120px; text-align:right">Quantity</MudTh>
                <MudTh style="width: 160px; text-align:right">Unit price</MudTh>
                <MudTh style="width: 160px; text-align:right">Line total</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd>@context.ProductId</MudTd>
                <MudTd>@context.ProductName</MudTd>
                <MudTd Style="text-align:right">@context.Quantity</MudTd>
                <MudTd Style="text-align:right">@context.UnitPrice.ToString("C")</MudTd>
                <MudTd Style="text-align:right">@context.LineTotal.ToString("C")</MudTd>
            </RowTemplate>

            <FooterContent>
                <MudTd></MudTd>
                <MudTd Style="text-align:right"><b>Totals:</b></MudTd>
                <MudTd Style="text-align:right"><b>@_order.Items.Sum(i => i.Quantity)</b></MudTd>
                <MudTd></MudTd>
                <MudTd Style="text-align:right"><b>@_order.TotalPrice.ToString("C")</b></MudTd>
            </FooterContent>
        </MudTable>
        
        <!-- Reserve products -->
        <MudDivider Class="my-4" />
        <MudText Typo="Typo.h6" Class="mb-2">Reserve products</MudText>

        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2" Class="mb-3">
            <MudSelect T="int?" Label="Select preferred branch" @bind-Value="selectedBranchId" Style="min-width:250px">
                @foreach (var b in branches)
                {
                    <MudSelectItem T="int?" Value="@b.Id">@b.Name (@b.Location)</MudSelectItem>
                }
            </MudSelect>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ReserveOrder"
                       Disabled="_order is null || selectedBranchId is null || _order.Status != nameof(OrderStatus.Pending)">
                Reserve
            </MudButton>
            @if (user_role == "Manager")
            {
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Secondary" 
                           OnClick="ReleaseOrder"
                           Disabled="_order is null || _order.Status != nameof(OrderStatus.Processing)">
                    Release
                </MudButton>
            }
        </MudStack>

        @if (reserveResult != null)
        {
            <MudPaper Class="pa-3">
                @if (reserveResult.IsPartial)
                {
                    <MudAlert Severity="Severity.Warning" Elevation="0" Dense="true">
                        Reservation was only partially successful – some items are missing.
                    </MudAlert>
                }
                else
                {
                    <MudAlert Severity="Severity.Success" Elevation="0" Dense="true">
                        Reservation completed successfully.
                    </MudAlert>
                }

                <MudTable T="ReserveLineResult" Items="@reserveResult.Lines" Dense="true" Bordered="true" Hover="true" Striped="true" Class="mt-3">
                    <HeaderContent>
                        <MudTh>Order Item Id</MudTh>
                        <MudTh style="text-align:right">Reserved</MudTh>
                        <MudTh style="text-align:right">Missing</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.OrderItemId</MudTd>
                        <MudTd Style="text-align:right">@context.ReservedQuantity</MudTd>
                        <MudTd Style="text-align:right">@context.MissingQuantity</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        }
    }
</MudPaper>

@code {
    [Inject] Blazored.LocalStorage.ILocalStorageService LocalStorage { get; set; } = default!;
    [Parameter] public int OrderId { get; set; }
    private OrderDetailsDto? _order;
    private List<BranchResponse> branches = new();
    private int? selectedBranchId;
    private ReserveResult? reserveResult;
    private bool _loading = true;
    private OrderStatus _newStatus;
    private string? user_role;

    protected override async Task OnInitializedAsync()
    {
        _order = await OrdersService.GetOrderByIdAsync(OrderId);
        branches = await BranchesService.GetBranchesAsync();
        if (_order != null && Enum.TryParse<OrderStatus>(_order.Status, out var parsed))
        {
            _newStatus = parsed;
        }
        _loading = false;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var token = await LocalStorage.GetItemAsync<string>("jwt");
        var expires = await LocalStorage.GetItemAsync<DateTime?>("jwt_expires");
        
        try
        {
            if (!string.IsNullOrWhiteSpace(token) && expires is not null && expires > DateTime.UtcNow)
            {
                user_role = await LocalStorage.GetItemAsync<string>("user_role");
            }
        }
        catch (InvalidOperationException)
        {
            
        }
        StateHasChanged();
    }

    private async Task ReserveOrder()
    {
        if (selectedBranchId == null)
        {
            Snackbar.Add("Choose prefered branch!", Severity.Info);
        }

        reserveResult = await OrdersService.ReserveOrderAsync(OrderId, selectedBranchId);
        _order = await OrdersService.GetOrderByIdAsync(OrderId);
        StateHasChanged();
    }
    
    private async Task ReleaseOrder()
    {
        if (_order == null)
            return;

        var success = await OrdersService.ReleaseOrderAsync(_order.Id);

        if (success)
        {
            _order = await OrdersService.GetOrderByIdAsync(OrderId);
            reserveResult = null;
            StateHasChanged();
        }
    }

    private static Color GetStatusColor(string status) => status switch
    {
        "Pending" => Color.Warning,
        "Processing" => Color.Info,
        "Completed" => Color.Success,
        "Cancelled" => Color.Error,
        _ => Color.Default
    };
    
    private async Task UpdateStatus()
    {
        if (_order == null) return;

        var success = await OrdersService.UpdateOrderStatusAsync(_order.Id, _newStatus.ToString());
        if (success)
        {
            _order = _order with { Status = _newStatus.ToString() };
            Snackbar.Add("Status updated successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Failed to update status", Severity.Error);
        }
    }

}
