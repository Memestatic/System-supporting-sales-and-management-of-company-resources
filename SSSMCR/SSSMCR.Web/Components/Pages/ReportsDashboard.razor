@page "/reports"
@using SSSMCR.Web.Services
@inject ReportsApiService ReportsApi
@inject ISnackbar Snackbar

<MudContainer Class="pa-6 d-flex flex-column align-center">
    <MudText Typo="Typo.h5" Class="mb-6">Sales Dashboard</MudText>

    @if (_loading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Medium" />
    }
    else
    {
        <MudCard Class="mb-6" Style="max-width: 800px; width: 100%;">
            <MudCardContent>
                <MudText Typo="Typo.h6" Class="mb-4" Align="Align.Center">Sales by Branch (Last 30 Days)</MudText>
                <MudChart ChartType="ChartType.Pie"
                          InputData="@_branchData"
                          InputLabels="@_branchLabels"
                          ChartOptions="@_pieChartOptions"
                          Width="100%"
                          Height="400px"
                          LegendPosition="Position.Right" />
                
                <MudDivider Class="my-4" />
                <MudGrid Justify="Justify.Center">
                    @for (var i = 0; i < _branchLabels.Length; i++)
                    {
                        var index = i;
                        <MudItem xs="12" sm="6" md="4">
                            <MudText Typo="Typo.body2" Align="Align.Center">
                                <strong>@_branchLabels[index]:</strong> @_branchData[index].ToString("N0") zł
                            </MudText>
                        </MudItem>
                    }
                </MudGrid>
            </MudCardContent>
        </MudCard>
        
        <MudCard Class="mb-4" Style="max-width: 900px; width: 100%; text-align:center;">
            <MudCardContent>
                <MudText Typo="Typo.h6" Class="mb-4">Sales Trend (Last 30 Days) - Values in PLN</MudText>
                <MudChart ChartType="ChartType.Line"
                          ChartSeries="@_trendSeries"
                          XAxisLabels="@_trendLabels"
                          ChartOptions="@_chartOptions"
                          AxisChartOptions="_axisChartOptions"
                          Width="100%"
                          Height="400px" />
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private bool _loading = true;
    
    private string[] _branchLabels = Array.Empty<string>();
    private double[] _branchData = Array.Empty<double>();
    
    private string[] _trendLabels = Array.Empty<string>();
    private List<ChartSeries> _trendSeries = new();
    
    private ChartOptions _chartOptions = new()
    {
        LineStrokeWidth = 2,
        InterpolationOption = InterpolationOption.Straight,
        YAxisFormat = "#,##0 'zł'",
        YAxisLines = true,
    };

    private AxisChartOptions _axisChartOptions = new()
    {
        XAxisLabelRotation = 30,
        MatchBoundsToSize = true
    };
    
    private ChartOptions _pieChartOptions = new()
    {
        ChartPalette = new[]
        {
            "#1976D2", // blue 700
            "#43A047", // green 600
            "#FB8C00", // orange 600
            "#E53935", // red 600
            "#8E24AA", // purple 600
            "#00ACC1", // cyan 600
            "#FDD835", // yellow 600
            "#6D4C41"  // brown 600
        },
        YAxisFormat = "#,##0 'zł'",
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var branchSales = await ReportsApi.GetSalesByBranchAsync();
            var trendSales = await ReportsApi.GetSalesTrendAsync();

            // === DANE DO PIE ===
            _branchLabels = branchSales.Select(b => b.Branch).ToArray();
            _branchData = branchSales.Select(b => (double)b.Total).ToArray();

            // === DANE DO LINE ===
            _trendLabels = trendSales.Select(t => t.Date.ToString("dd.MM")).ToArray();
            _trendSeries = new()
            {
                new ChartSeries
                {
                    Name = "Sales Trend",
                    Data = trendSales.Select(t => (double)t.Total).ToArray(),
                    LineDisplayType = LineDisplayType.Line,
                    ShowDataMarkers = true
                }
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load reports: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
}
