@using SSSMCR.Shared.Model
@using SSSMCR.Web.Components.Components.Dialogs
@using SSSMCR.Web.Services
@inject BranchesApiService BranchesApiService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="pa-4">
    <MudTable Items="branches" Dense="true" Hover="true">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Location</MudTh>
            <MudTh>Latitude</MudTh>
            <MudTh>Longitude</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Location">@context.Location</MudTd>
            <MudTd DataLabel="Latitude">@context.Latitude</MudTd>
            <MudTd DataLabel="Longitude">@context.Longitude</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => OpenDialog(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => Delete(context.Id)" />
            </MudTd>
        </RowTemplate>
        <ToolBarContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(()=>OpenDialog(null))">
                Add Branch
            </MudButton>
        </ToolBarContent>
    </MudTable>
</MudPaper>

@code {
    private List<BranchResponse> branches = new();

    protected override async Task OnInitializedAsync()
    {
        branches = await BranchesApiService.GetBranchesAsync();
    }

    private async Task Delete(int id)
    {
        bool confirmed = await DialogService.ShowMessageBox(
            "Confirm Delete",
            "Are you sure you want to delete this branch?",
            yesText: "Delete", cancelText: "Cancel") == true;

        if (confirmed)
        {
            try
            {
                await BranchesApiService.DeleteBranchAsync(id);
                branches.RemoveAll(u => u.Id == id);
                Snackbar.Add("Branch deleted", Severity.Success);
            }
            catch(Exception)
            {
                Snackbar.Add("Cannot delete branch, as some users are assigned to it.", Severity.Error);
            }
        }
    }
    
    private async Task OpenDialog(BranchResponse? branch)
    {
        var parameters = new DialogParameters
        {
            ["Branch"] = branch
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<BranchEditDialog>("Branch Editor", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled && result.Data is BranchResponse updated)
        {
            var idx = branches.FindIndex(u => u.Id == updated.Id);
            if (idx >= 0) branches[idx] = updated;
            else branches.Add(updated);

            Snackbar.Add("Branch saved", Severity.Success);
        }
    }
}