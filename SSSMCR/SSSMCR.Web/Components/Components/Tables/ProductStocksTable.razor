@using SSSMCR.Shared.Model
@using SSSMCR.Web.Services
@using SSSMCR.Web.Components.Components.Dialogs
@inject ProductStocksApiService StocksApi
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h6" Class="mb-2">Product stocks</MudText>

    <MudStack Row="true" Spacing="2" Class="mb-3">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="RefreshStocks">
            Refresh
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="RecalculateThresholds">
            Recalculate thresholds
        </MudButton>
    </MudStack>
    
    <MudTable T="ProductStockDto" Items="_stocks" Dense="true" Bordered="true" Hover="true" Striped="true">
        <HeaderContent>
            <MudTh>Product</MudTh>
            <MudTh>Branch</MudTh>
            <MudTh style="text-align:right">Quantity</MudTh>
            <MudTh style="text-align:right">Reserved</MudTh>
            <MudTh style="text-align:right">Available</MudTh>
            <MudTh style="text-align:right">Critical</MudTh>
            <MudTh>Last updated</MudTh>
            <MudTh style="width:1%">Supply</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.ProductName</MudTd>
            <MudTd>@context.BranchName</MudTd>
            <MudTd Style="text-align:right">@context.Quantity</MudTd>
            <MudTd Style="text-align:right">@context.ReservedQuantity</MudTd>
            <MudTd Style="text-align:right">
                <MudChip T="string" Color="@(context.Available <= context.CriticalThreshold ? Color.Error : Color.Success)" Variant="Variant.Filled">
                    @context.Available
                </MudChip>
            </MudTd>
            <MudTd Style="text-align:right">@context.CriticalThreshold</MudTd>
            <MudTd>@context.LastUpdatedAt.ToString("yyyy-MM-dd HH:mm")</MudTd>
            <MudTd>
                <MudButton Size="Size.Small" OnClick="@(() => OpenQuickSupply(context))">
                    Order
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    [Parameter] public int? BranchId { get; set; }
    private List<ProductStockDto> _stocks = new();
    private int? _currentBranchId;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _stocks = await StocksApi.GetStocksAsync(BranchId);
        _currentBranchId = BranchId;
        StateHasChanged();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (_currentBranchId != BranchId)
        {
            _stocks = await StocksApi.GetStocksAsync(BranchId);
            _currentBranchId = BranchId;
            StateHasChanged();
        }
    }
    
    private async Task RecalculateThresholds()
    {
        try
        {
            var message = await StocksApi.RecalculateThresholdsAsync();
            Snackbar.Add(message, Severity.Success);
            await RefreshStocks();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to recalculate thresholds: {ex.Message}", Severity.Error);
        }
    }

    private async Task RefreshStocks()
    {
        _stocks = await StocksApi.GetStocksAsync(BranchId);
        StateHasChanged();
    }

    private void OpenQuickSupply(ProductStockDto row)
    {
        var parameters = new DialogParameters<QuickSupplyDialog>
        {
            { x => x.ProductId, row.ProductId },
            { x => x.ProductName, row.ProductName },
            { x => x.BranchId, row.BranchId }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        DialogService.Show<QuickSupplyDialog>("Quick supply", parameters, options);
    }
}