@using SSSMCR.Shared.Model
@using SSSMCR.Web.Components.Components.Dialogs
@using SSSMCR.Web.Services
@inject ProductsApiService ProductsApiService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="pa-4">
    <MudTable Items="products" Dense="true" Hover="true">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Unit Price</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Unit Price">@context.UnitPrice</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => OpenDialog(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => Delete(context.Id)" />
            </MudTd>
        </RowTemplate>
        <ToolBarContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(()=>OpenDialog(null))">
                Add Product
            </MudButton>
        </ToolBarContent>
    </MudTable>
</MudPaper>

@code{

    private List<ProductResponse> products = new();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductsApiService.GetProductsAsync();
    }

    private async Task Delete(int id)
    {
        bool confirmed = await DialogService.ShowMessageBox(
            "Confirm Delete",
            "Are you sure you want to delete this product?",
            yesText: "Delete", cancelText: "Cancel") == true;

        if (confirmed)
        {
            try
            {
                await ProductsApiService.DeleteProductAsync(id);
                products.RemoveAll(u => u.Id == id);
                Snackbar.Add("Product deleted", Severity.Success);
            }
            catch (Exception)
            {
                Snackbar.Add("Cannot delete product as some Orders contain it.", Severity.Error);
            }
        }
    }

    private async Task OpenDialog(ProductResponse? product)
    {
        var parameters = new DialogParameters
        {
            ["Product"] = product
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ProductEditDialog>("Product Editor", parameters, options);
        var result = await dialog.Result;
        
        if (result != null && !result.Canceled && result.Data is ProductResponse updated)
        {
            var idx = products.FindIndex(u => u.Id == updated.Id);
            if (idx >= 0) products[idx] = updated;
            else products.Add(updated);

            Snackbar.Add("Product saved", Severity.Success);
        }
    }
}