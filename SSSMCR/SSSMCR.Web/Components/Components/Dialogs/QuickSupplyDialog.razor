@using SSSMCR.Shared.Model
@using SSSMCR.Web.Services
@inject SuppliersApiService SuppliersApi
@inject SupplyApiService SupplyApi
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudStack Spacing="2">
            <MudText Typo="Typo.h6">Quick supply for: @ProductName</MudText>

            <MudSelect T="int?" Label="Supplier" @bind-Value="_supplierId" Required="true">
                @if (_suppliers.Count == 0)
                {
                    <MudSelectItem T="int?" Value="@null" Disabled="true">(no suppliers)</MudSelectItem>
                }
                else
                {
                    @foreach (var s in _suppliers)
                    {
                        <MudSelectItem T="int?" Value="@s.Id">@s.Name</MudSelectItem>
                    }
                }
            </MudSelect>

            <MudNumericField T="int" Label="Quantity" Min="1" @bind-Value="_qty" Required="true" />

            <MudText Typo="Typo.caption">Branch Id: <b>@BranchId</b></MudText>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="@Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_supplierId.HasValue || _qty < 1 || _busy)" OnClick="@Create">
            @if (_busy)
            {
                <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="mr-2" />
            }
            Create
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance? DialogInstance { get; set; }

    [Parameter] public int ProductId { get; set; }
    [Parameter] public string ProductName { get; set; } = "";
    [Parameter] public int BranchId { get; set; }

    private List<SupplierResponse> _suppliers = new();
    private int? _supplierId;
    private int _qty = 1;
    private bool _busy;

    protected override async Task OnInitializedAsync()
    {
        _suppliers = await SuppliersApi.GetSuppliersByProductAsync(ProductId);
    }

    private void Cancel()
    {
        if (DialogInstance != null) DialogInstance.Cancel();
    }

    private async Task Create()
    {
        if (!_supplierId.HasValue || _qty < 1) return;

        _busy = true;
        try
        {
            var create = new SupplyOrderCreateDto
            {
                SupplierId = _supplierId.Value,
                BranchId = BranchId,
                Items = new List<SupplyItemCreateDto>
                {
                    new SupplyItemCreateDto { ProductId = ProductId, Quantity = _qty }
                }
            };

            var res = await SupplyApi.CreateOrderAsync(create);
            if (res is not null)
            {
                Snackbar.Add("Supply order created.", Severity.Success);
                if (DialogInstance != null) DialogInstance.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add("Failed to create order.", Severity.Error);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating order: {ex.Message}", Severity.Error);
        }
        finally
        {
            _busy = false;
        }
    }
}