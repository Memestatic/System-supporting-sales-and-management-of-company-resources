@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using SSSMCR.Shared.Model
@using SSSMCR.Web.Services
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject IAuthService AuthService

<MudDialog>
    <DialogContent>
        <MudStack Spacing="2">
            <MudForm @ref="form" Model="_model" @bind-IsValid="valid">
                <MudTextField @bind-Value="_model.CurrentPassword" Label="Current password" InputType="InputType.Password" Required="true" 
                              Error="@(!string.IsNullOrEmpty(error))"
                              ErrorText="@error"/>
                <MudTextField @bind-Value="_model.NewPassword" Label="New password" InputType="InputType.Password" Required="true" 
                              Validation="@(new Func<string, IEnumerable<string>>(AuthService.PasswordStrengthRequired))"/>
                <MudTextField @bind-Value="_model.Confirm" Label="Confirm new password" InputType="InputType.Password" Required="true" />
            </MudForm>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Disabled="!valid" Color="Color.Primary" OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    public IMudDialogInstance MudDialog { get; set; } = default!;
    private MudForm form = default!;
    private Model _model = new();
    private string? error;
    private bool valid;

    private async Task Submit()
    {
        error = null;
        await form.Validate();
        if (!valid) return;
        
        if (_model.NewPassword != _model.Confirm)
        {
            Snackbar.Add("Passwords don’t match.", Severity.Warning);
            return;
        }

        try
        {
            await UserService.ChangePasswordAsync(new ChangePasswordRequest
            {
                CurrentPassword = _model.CurrentPassword,
                NewPassword = _model.NewPassword
            });
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (HttpRequestException)
        {
            error = "Password is not correct.";
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed: {ex.Message}", Severity.Error);
        }
    }
    
    private void Cancel() => MudDialog.Cancel();

    private sealed class Model
    {
        [Required] public string CurrentPassword { get; set; } = "";
        [Required, MinLength(6)] public string NewPassword { get; set; } = "";
        [Required] public string Confirm { get; set; } = "";
    }
}
