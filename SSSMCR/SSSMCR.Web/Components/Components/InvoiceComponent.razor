@inject InvoiceApiService InvoiceService
@using SSSMCR.Web.Services
@inject IJSRuntime Js

<MudPaper Class="pa-4 position-relative">
    <MudText Typo="Typo.h6">Generate Invoice for Order #@OrderId</MudText>

    <MudTextField @bind-Value="OrderId" Label="Order ID" Variant="Variant.Outlined" Disabled="true" />

    <MudButton OnClick="GenerateInvoice" Color="Color.Primary" Variant="Variant.Filled" Class="mt-3" Disabled="@IsLoading">
        @if (IsLoading)
        {
            <MudProgressCircular Indeterminate="true" Size="Size.Medium" Class="me-2" />
        }
        else
        {
            @("Show Invoice")
        }
    </MudButton>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <MudAlert Severity="Severity.Error" Dense="true" Class="mt-2">
            @ErrorMessage
        </MudAlert>
    }

    @if (!string.IsNullOrEmpty(PdfDataUrl))
    {
        <MudDivider Class="my-4" />
        <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.subtitle1">Preview</MudText>

            <MudButton Variant="Variant.Outlined"
                       Color="Color.Primary"
                       OnClick="OpenPdfInNewTab"
                       StartIcon="@Icons.Material.Filled.OpenInNew">
                Open in new tab
            </MudButton>

            <MudButton Variant="Variant.Text"
                       Color="Color.Secondary"
                       Href="@PdfDataUrl"
                       download="invoice.pdf"
                       StartIcon="@Icons.Material.Filled.Download">
                Download PDF
            </MudButton>
        </MudStack>

        <MudPaper Class="mt-2" Style="height:80vh; overflow:hidden;">
            <iframe src="@PdfDataUrl"
                    title="Invoice PDF"
                    width="100%"
                    height="100%"
                    style="border:0;"></iframe>
        </MudPaper>
    }
    
    <MudOverlay Visible="@IsLoading" DarkBackground="true">
        <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
    </MudOverlay>
</MudPaper>

@code {
    [Parameter] public int OrderId { get; set; }
    private string? ErrorMessage { get; set; }
    private string? PdfDataUrl { get; set; }
    private bool IsLoading { get; set; }

    private async Task GenerateInvoice()
    {
        ErrorMessage = null;
        PdfDataUrl = null;
        IsLoading = true;

        try
        {
            var dataUrl = await InvoiceService.GetInvoiceDataUrlAsync(OrderId);
            if (string.IsNullOrEmpty(dataUrl))
            {
                ErrorMessage = "Failed to generate invoice.";
            }
            else
            {
                PdfDataUrl = dataUrl;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OpenPdfInNewTab()
    {
        if (!string.IsNullOrEmpty(PdfDataUrl))
        {
            await Js.InvokeVoidAsync("open", PdfDataUrl, "_blank", "noopener");
        }
    }
}
